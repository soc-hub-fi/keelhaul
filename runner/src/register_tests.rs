use core::ptr::read_volatile;
use core::ptr::write_volatile;
#[allow(non_snake_case)] pub fn test_ddr_refresh_ack_4288675840() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675840 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ddr_init_done_4288675844() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675844 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_axi_enabled_4288675848() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675848 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 1;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_init_4288675852() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675852 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 10000;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_arf_4288675856() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675856 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 380;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_mrd_4288675860() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675860 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 2;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_ras_4288675864() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675864 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 3;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_rc_4288675868() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675868 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_rcd_4288675872() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675872 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 2;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_rfc_4288675876() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675876 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_rp_4288675880() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675880 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 2;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_rrd_4288675884() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675884 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 1;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_wr_4288675888() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675888 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 1;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_t_wtr_4288675892() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675892 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 2;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_burst_len_4288675896() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675896 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 1;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_burst_cycles_4288675900() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675900 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 1;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_rd_lat_4288675904() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675904 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 3;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_wr_lat_4288675908() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675908 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 1;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_col_shift_4288675912() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675912 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 1;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_col_mask_4288675916() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675916 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 1023;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_row_shift_4288675920() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675920 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 13;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_row_mask_4288675924() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675924 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 16383;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_bank_shift_4288675928() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675928 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 11;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_bank_mask_4288675932() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675932 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 3;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_offset_4288675936() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675936 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_start_addr_4288675940() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675940 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_c_end_addr_4288675944() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675944 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 3221225471;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_d_wrseparation_4288675948() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675948 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_d_wrlatcorr_4288675952() -> u32 {#[allow(unused)] let address: *mut u32 = 4288675952 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ID_4293918720() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918720 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_INFO_4293918724() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918724 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CONFIG_4293918760() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918760 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ADDRESS_MASKING_RX_4293918756() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918756 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ADDRESS_MAPPING_RX_4293918752() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918752 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ADDRESS_MASKING_TX_4293918748() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918748 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ADDRESS_MAPPING_TX_4293918744() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918744 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_IRQ_CONFIG_4293918740() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918740 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_IRQ_EN_4293918736() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918736 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_STATUS_CLR_4293918732() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918732 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_STATUS_4293918728() -> u32 {#[allow(unused)] let address: *mut u32 = 4293918728 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_ID_4292870144() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870144 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_INFO_4292870148() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870148 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_STATUS_4292870152() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870152 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_STATUS_CLR_4292870156() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870156 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_IRQ_EN_4292870160() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870160 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_IRQ_CONFIG_4292870164() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870164 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ADDRESS_MAPPING_TX_4292870168() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870168 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_C2C_CONFIG_2_4292870188() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870188 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_C2C_CONFIG_1_4292870184() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870184 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ADDRESS_MASKING_RX_4292870180() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870180 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ADDRESS_MAPPING_RX_4292870176() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870176 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ADDRESS_MASKING_TX_4292870172() -> u32 {#[allow(unused)] let address: *mut u32 = 4292870172 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DIR_4287631360() -> u32 {#[allow(unused)] let address: *mut u32 = 4287631360 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_EN_4287631364() -> u32 {#[allow(unused)] let address: *mut u32 = 4287631364 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_IN_4287631368() -> u32 {#[allow(unused)] let address: *mut u32 = 4287631368 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_OUT_4287631372() -> u32 {#[allow(unused)] let address: *mut u32 = 4287631372 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_0_3_4287631400() -> u32 {#[allow(unused)] let address: *mut u32 = 4287631400 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_4_7_4287631404() -> u32 {#[allow(unused)] let address: *mut u32 = 4287631404 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_8_11_4287631408() -> u32 {#[allow(unused)] let address: *mut u32 = 4287631408 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_12_15_4287631412() -> u32 {#[allow(unused)] let address: *mut u32 = 4287631412 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CTRL_CFG_CG_4287635456() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635456 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CTRL_CFG_EVENT_4287635460() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635460 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CTRL_CFG_RST_4287635464() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635464 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_RX_SADDR_4287635584() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635584 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_RX_SIZE_4287635588() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635588 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_RX_CFG_4287635592() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635592 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_TX_SADDR_4287635600() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635600 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_TX_SIZE_4287635604() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635604 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_TX_CFG_4287635608() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635608 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_ERROR_4287635624() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635624 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_SPIM_RX_SIZE_4287635716() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635716 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_DATA_4287635636() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635636 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_SPIM_RX_SADDR_4287635712() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635712 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_STATUS_4287635616() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635616 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_UART_IRQ_EN_4287635628() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635628 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_VALID_4287635632() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635632 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_SPIM_CMD_SADDR_4287635744() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635744 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SPIM_TX_SADDR_4287635728() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635728 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SPIM_CMD_SIZE_4287635748() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635748 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SPIM_TX_SIZE_4287635732() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635732 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SPIM_CMD_CFG_4287635752() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635752 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_UART_SETUP_4287635620() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635620 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SPIM_TX_CFG_4287635736() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635736 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SPIM_RX_CFG_4287635720() -> u32 {#[allow(unused)] let address: *mut u32 = 4287635720 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH0_LEN1_4287636492() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636492 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH0_CFG_4287636484() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636484 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH0_LEN2_4287636496() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636496 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH0_LEN0_4287636488() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636488 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH0_ADD_4287636480() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636480 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH1_ADD_4287636500() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636500 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH1_CFG_4287636504() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636504 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH1_LEN0_4287636508() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636508 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH1_LEN1_4287636512() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636512 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_FILT_CMD_4287636572() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636572 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_BINCU_VAL_4287636564() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636564 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_BINCU_CNT_4287636556() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636556 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AU_REG1_4287636548() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636548 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AU_CFG_4287636540() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636540 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_RX_CH_LEN1_4287636532() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636532 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_RX_CH_CFG_4287636524() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636524 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TX_CH1_LEN2_4287636516() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636516 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_STATUS_4287636576() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636576 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_FILT_4287636568() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636568 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_BINCU_SETUP_4287636560() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636560 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_BINCU_TH_4287636552() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636552 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AU_REG0_4287636544() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636544 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_RX_CH_LEN2_4287636536() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636536 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_RX_CH_LEN0_4287636528() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636528 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_RX_CH_ADD_4287636520() -> u32 {#[allow(unused)] let address: *mut u32 = 4287636520 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T0_CMD_4287647744() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647744 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T0_CONFIG_4287647748() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647748 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T0_THRESHOLD_4287647752() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647752 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T0_TH_CHANNEL0_4287647756() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647756 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T0_TH_CHANNEL1_4287647760() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647760 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T0_TH_CHANNEL2_4287647764() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647764 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T0_TH_CHANNEL3_4287647768() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647768 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T0_COUNTER_4287647788() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647788 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_T1_CMD_4287647808() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647808 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T1_CONFIG_4287647812() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647812 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T1_THRESHOLD_4287647816() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647816 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T1_TH_CHANNEL0_4287647820() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647820 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T1_TH_CHANNEL1_4287647824() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647824 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T1_TH_CHANNEL2_4287647828() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647828 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T1_TH_CHANNEL3_4287647832() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647832 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T1_COUNTER_4287647852() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647852 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_T2_CMD_4287647872() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647872 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T2_CONFIG_4287647876() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647876 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T2_THRESHOLD_4287647880() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647880 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T2_TH_CHANNEL0_4287647884() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647884 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T2_TH_CHANNEL1_4287647888() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647888 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T2_TH_CHANNEL2_4287647892() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647892 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T2_TH_CHANNEL3_4287647896() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647896 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T2_COUNTER_4287647916() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647916 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T3_CMD_4287647936() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647936 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T3_CONFIG_4287647940() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647940 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T3_THRESHOLD_4287647944() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647944 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T3_TH_CHANNEL0_4287647948() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647948 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T3_TH_CHANNEL1_4287647952() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647952 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T3_TH_CHANNEL2_4287647956() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647956 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T3_TH_CHANNEL3_4287647960() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647960 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CG_4287648004() -> u32 {#[allow(unused)] let address: *mut u32 = 4287648004 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_T3_COUNTER_4287647980() -> u32 {#[allow(unused)] let address: *mut u32 = 4287647980 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_EVENT_CFG_4287648000() -> u32 {#[allow(unused)] let address: *mut u32 = 4287648000 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SW_EVENT_4287651840() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651840 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FC_MASK0_4287651844() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651844 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FC_MASK1_4287651848() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651848 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FC_MASK2_4287651852() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651852 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FC_MASK3_4287651856() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651856 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FC_MASK4_4287651860() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651860 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FC_MASK5_4287651864() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651864 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FC_MASK6_4287651868() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651868 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FC_MASK7_4287651872() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651872 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PR_MASK1_4287651912() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651912 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PR_MASK2_4287651916() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651916 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PR_MASK3_4287651920() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651920 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PR_MASK4_4287651924() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651924 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PR_MASK5_4287651928() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651928 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PR_MASK6_4287651932() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651932 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PR_MASK7_4287651936() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651936 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ERR0_4287651940() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651940 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_PR_MASK0_4287651908() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651908 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 4294967295;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ERR1_4287651944() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651944 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_ERR2_4287651948() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651948 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_ERR3_4287651952() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651952 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_ERR4_4287651956() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651956 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_ERR5_4287651960() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651960 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_ERR6_4287651964() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651964 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_TIMER_HI_4287651976() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651976 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ERR7_4287651968() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651968 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_TIMER_LO_4287651972() -> u32 {#[allow(unused)] let address: *mut u32 = 4287651972 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_MASK_read_4287664128() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664128 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_MASK_set_4287664132() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664132 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_MASK_clear_4287664136() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664136 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_INT_read_4287664140() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664140 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_INT_set_4287664144() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664144 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_INT_clear_4287664148() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664148 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ACK_read_4287664152() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664152 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ACK_set_4287664156() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664156 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_ACK_clear_4287664160() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664160 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FIFO_DATA_4287664164() -> u32 {#[allow(unused)] let address: *mut u32 = 4287664164 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CFG_LO_4287672320() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672320 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CFG_HI_4287672324() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672324 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CNT_LO_4287672328() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672328 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CNT_HI_4287672332() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672332 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CMP_LO_4287672336() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672336 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CMP_HI_4287672340() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672340 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_START_LO_4287672344() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672344 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_START_HI_4287672348() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672348 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_RESET_LO_4287672352() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672352 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_RESET_HI_4287672356() -> u32 {#[allow(unused)] let address: *mut u32 = 4287672356 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CMD_OP_4287758368() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758368 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CMD_ARG_4287758372() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758372 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DATA_SETUP_4287758376() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758376 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_START_4287758380() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758380 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_STOP_4287758428() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758428 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_RSP0_4287758384() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758384 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_CID3_4287758420() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758420 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_CID1_4287758412() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758412 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_STATUS_4287758404() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758404 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 16;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_RSP3_4287758396() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758396 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_RSP1_4287758388() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758388 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_RCA_4287758424() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758424 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_CID2_4287758416() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758416 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_CID0_4287758408() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758408 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_CLK_DIV_0_4287758400() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758400 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_RSP2_4287758392() -> u32 {#[allow(unused)] let address: *mut u32 = 4287758392 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_INFO_4287643648() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643648 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 262144;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FCBOOT_4287643652() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643652 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 436207744;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_FCFETCH_4287643656() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643656 as *mut u32;let reset_value = 1;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_MUX_0_4287643664() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643664 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CLUSTER_BOOT_ADDR0_4287643776() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643776 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CS_RO_4287643840() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643840 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_BOOTSEL_4287643844() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643844 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_CLUSTER_BOOT_ADDR1_4287643780() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643780 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_JTAGREG_4287643764() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643764 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CTRL_PER_4287643768() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643768 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CLKSEL_4287643848() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643848 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_CORESTATUS_4287643808() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643808 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CLUSTER_IRQ_4287643772() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643772 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_1_4287643684() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643684 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 2348883971;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_CLUSTER_CTRL_4287643760() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643760 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 9;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TTA_PLL_LOOP_CTRL_4287643744() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643744 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TTA_PLL_DIV_4287643748() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643748 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TTA_PLL_DEBUG_CTRL_4287643752() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643752 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TTA_PLL_ENABLE_4287643756() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643756 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TTA_PLL_SPARE_CTRL_4287643784() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643784 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TTA_PLL_TMUX_SEL_4287643788() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643788 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TTA_PLL_STATUS1_4287643792() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643792 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_0_4287643680() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643680 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 2348883971;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_INTER_CLK_DIV_4287643852() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643852 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_PERIPH_CLK_DIV_4287643816() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643816 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TTA_PLL_STATUS2_4287643836() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643836 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TOPPERIPH_CLK_DIV_4287643796() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643796 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_SS_CLK_CTRL1_4287643800() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643800 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_SS_CLK_CTRL2_4287643804() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643804 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_SS_RESET_EN_4287643824() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643824 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_SS_CLK_EN_4287643828() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643828 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_SS_CLK_CTRL3_4287643832() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643832 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_SLOW_PULSE_DIV_4287643812() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643812 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_2_4287643688() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643688 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 2348883971;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_3_4287643692() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643692 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 2348883971;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_5_4287643700() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643700 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 131124;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_PAD_CFG_4_4287643696() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643696 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 2348883971;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_ETH_PLL_LOOP_CTRL_4287643856() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643856 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_ETH_PLL_DIV_4287643860() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643860 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_ETH_PLL_DEBUG_CTRL_4287643864() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643864 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_ETH_PLL_ENABLE_4287643868() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643868 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_ETH_PLL_SPARE_CTRL_4287643872() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643872 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_ETH_PLL_TMUX_SEL_4287643876() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643876 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_ETH_PLL_STATUS1_4287643880() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643880 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_ETH_PLL_STATUS2_4287643884() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643884 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AI_PLL_LOOP_CTRL_4287643888() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643888 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AI_PLL_DIV_4287643892() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643892 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AI_PLL_DEBUG_CTRL_4287643896() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643896 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AI_PLL_ENABLE_4287643900() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643900 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AI_PLL_SPARE_CTRL_4287643904() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643904 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AI_PLL_TMUX_SEL_4287643908() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643908 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AI_PLL_STATUS1_4287643912() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643912 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_AI_PLL_STATUS2_4287643916() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643916 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_HPC_PLL_LOOP_CTRL_4287643920() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643920 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_HPC_PLL_DIV_4287643924() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643924 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_HPC_PLL_DEBUG_CTRL_4287643928() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643928 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_HPC_PLL_ENABLE_4287643932() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643932 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_HPC_PLL_SPARE_CTRL_4287643936() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643936 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_HPC_PLL_TMUX_SEL_4287643940() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643940 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_HPC_PLL_STATUS1_4287643944() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643944 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_HPC_PLL_STATUS2_4287643948() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643948 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_PULP_PLL_LOOP_CTRL_4287643952() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643952 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_PULP_PLL_DIV_4287643956() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643956 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_PULP_PLL_DEBUG_CTRL_4287643960() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643960 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_PULP_PLL_ENABLE_4287643964() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643964 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_PULP_PLL_SPARE_CTRL_4287643968() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643968 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_PULP_PLL_TMUX_SEL_4287643972() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643972 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_PULP_PLL_STATUS1_4287643976() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643976 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_PULP_PLL_STATUS2_4287643980() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643980 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_INTER_PLL_LOOP_CTRL_4287643984() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643984 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_INTER_PLL_DIV_4287643988() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643988 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_INTER_PLL_DEBUG_CTRL_4287643992() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643992 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_INTER_PLL_ENABLE_4287643996() -> u32 {#[allow(unused)] let address: *mut u32 = 4287643996 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_INTER_PLL_SPARE_CTRL_4287644000() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644000 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_INTER_PLL_TMUX_SEL_4287644004() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644004 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_INTER_PLL_STATUS1_4287644008() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644008 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_INTER_PLL_STATUS2_4287644012() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644012 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_C2C_PLL_LOOP_CTRL_4287644016() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644016 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_C2C_PLL_DIV_4287644020() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644020 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_C2C_PLL_DEBUG_CTRL_4287644024() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644024 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_C2C_PLL_ENABLE_4287644028() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644028 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_C2C_PLL_SPARE_CTRL_4287644032() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644032 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_C2C_PLL_TMUX_SEL_4287644036() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644036 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_C2C_PLL_STATUS1_4287644040() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644040 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_C2C_PLL_STATUS2_4287644044() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644044 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TOPPERIPH_PLL_LOOP_CTRL_4287644080() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644080 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TOPPERIPH_PLL_DIV_4287644084() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644084 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TOPPERIPH_PLL_DEBUG_CTRL_4287644088() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644088 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TOPPERIPH_PLL_ENABLE_4287644092() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644092 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TOPPERIPH_PLL_SPARE_CTRL_4287644096() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644096 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TOPPERIPH_PLL_TMUX_SEL_4287644100() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644100 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TOPPERIPH_PLL_STATUS1_4287644104() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644104 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_TOPPERIPH_PLL_STATUS2_4287644108() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644108 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_REG_BOOT_CFG_4287644112() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644112 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_REG_BOOT_STATUS_4287644116() -> u32 {#[allow(unused)] let address: *mut u32 = 4287644116 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_IP_ID_4291821568() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821568 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_INFO_4291821572() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821572 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_STATUS0_4291821576() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821576 as *mut u32;let _ = unsafe { read_volatile(address) }; 0}
#[allow(non_snake_case)] pub fn test_STATUS_CLEAR0_4291821592() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821592 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_IRQ_ENABLE0_4291821608() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821608 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_IRQ_CONFIG_4291821624() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821624 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_ADDR0_4291821632() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821632 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_LENGTH0_4291821636() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821636 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE0_4291821640() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821640 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE_SET0_4291821644() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821644 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE_UNSET0_4291821648() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821648 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_AXI_READ_CONFIG0_4291821652() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821652 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Read_Data_for_Processor_Channels_4291821656() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821656 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_ADDR0_4291821660() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821660 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_ADDR0_4291821696() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821696 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Write_Data_for_Processor_Channels_4291821684() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821684 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_AXI_WRITE_CONFIG0_4291821680() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821680 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE_UNSET0_4291821676() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821676 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE_SET0_4291821672() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821672 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE0_4291821668() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821668 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_LENGTH0_4291821664() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821664 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_LENGTH0_4291821700() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821700 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE0_4291821704() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821704 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE_SET0_4291821708() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821708 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE_UNSET0_4291821712() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821712 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_AXI_CONFIG0_4291821716() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821716 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Read_Data_for_Processor_Channels_0_4291821720() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821720 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_ADDR0_4291821724() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821724 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_LENGTH0_4291821728() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821728 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE0_4291821732() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821732 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE_SET0_4291821736() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821736 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE_UNSET0_4291821740() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821740 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_AXI_CONFIG0_4291821744() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821744 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_ADDR1_4291821760() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821760 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_LENGTH1_4291821764() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821764 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE1_4291821768() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821768 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE_SET1_4291821772() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821772 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE_UNSET1_4291821776() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821776 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_AXI_READ_CONFIG1_4291821780() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821780 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Read_Data_for_Processor_Channels_4291821784() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821784 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_ADDR1_4291821788() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821788 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_ADDR1_4291821824() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821824 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Write_Data_for_Processor_Channels_4291821812() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821812 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_AXI_WRITE_CONFIG1_4291821808() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821808 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE_UNSET1_4291821804() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821804 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE_SET1_4291821800() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821800 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE1_4291821796() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821796 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_LENGTH1_4291821792() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821792 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_LENGTH1_4291821828() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821828 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE1_4291821832() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821832 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE_SET1_4291821836() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821836 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE_UNSET1_4291821840() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821840 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_AXI_CONFIG1_4291821844() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821844 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Read_Data_for_Processor_Channels_1_4291821848() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821848 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_ADDR1_4291821852() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821852 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_LENGTH1_4291821856() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821856 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE1_4291821860() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821860 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE_SET1_4291821864() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821864 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE_UNSET1_4291821868() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821868 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_AXI_CONFIG1_4291821872() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821872 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_ADDR2_4291822016() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822016 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_LENGTH2_4291822020() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822020 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE2_4291822024() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822024 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE_SET2_4291822028() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822028 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE_UNSET2_4291822032() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822032 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_AXI_READ_CONFIG2_4291822036() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822036 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Read_Data_for_Processor_Channels_4291822040() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822040 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_ADDR2_4291822044() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822044 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_ADDR2_4291822080() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822080 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Write_Data_for_Processor_Channels_4291822068() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822068 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_AXI_WRITE_CONFIG2_4291822064() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822064 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE_UNSET2_4291822060() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822060 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE_SET2_4291822056() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822056 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE2_4291822052() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822052 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_LENGTH2_4291822048() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822048 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_LENGTH2_4291822084() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822084 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE2_4291822088() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822088 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE_SET2_4291822092() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822092 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE_UNSET2_4291822096() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822096 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_AXI_CONFIG2_4291822100() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822100 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Read_Data_for_Processor_Channels_0_4291822104() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822104 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_ADDR2_4291822108() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822108 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_LENGTH2_4291822112() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822112 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE2_4291822116() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822116 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE_SET2_4291822120() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822120 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE_UNSET2_4291822124() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822124 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_AXI_CONFIG2_4291822128() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822128 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_ADDR3_4291821888() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821888 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_LENGTH3_4291821892() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821892 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE3_4291821896() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821896 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE_SET3_4291821900() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821900 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_SOURCE_MODE_UNSET3_4291821904() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821904 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_AXI_READ_CONFIG3_4291821908() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821908 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Read_Data_for_Processor_Channels_4291821912() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821912 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_ADDR3_4291821916() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821916 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_ADDR3_4291821952() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821952 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Write_Data_for_Processor_Channels_4291821940() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821940 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_AXI_WRITE_CONFIG3_4291821936() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821936 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE_UNSET3_4291821932() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821932 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE_SET3_4291821928() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821928 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_MODE3_4291821924() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821924 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_DESTINATION_LENGTH3_4291821920() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821920 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_LENGTH3_4291821956() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821956 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE3_4291821960() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821960 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE_SET3_4291821964() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821964 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_MODE_UNSET3_4291821968() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821968 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_SOURCE_AXI_CONFIG3_4291821972() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821972 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_Reserved_Read_Data_for_Processor_Channels_0_4291821976() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821976 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_ADDR3_4291821980() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821980 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_LENGTH3_4291821984() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821984 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE3_4291821988() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821988 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE_SET3_4291821992() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821992 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_MODE_UNSET3_4291821996() -> u32 {#[allow(unused)] let address: *mut u32 = 4291821996 as *mut u32;let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
#[allow(non_snake_case)] pub fn test_D_DESTINATION_AXI_CONFIG3_4291822000() -> u32 {#[allow(unused)] let address: *mut u32 = 4291822000 as *mut u32;let _ = unsafe { read_volatile(address) };let reset_value = 0;unsafe { write_volatile(address, reset_value) }; 0}
pub static FUNCTIONS: [fn()->u32;415] = [test_ddr_refresh_ack_4288675840,test_ddr_init_done_4288675844,test_axi_enabled_4288675848,test_t_init_4288675852,test_t_arf_4288675856,test_t_mrd_4288675860,test_t_ras_4288675864,test_t_rc_4288675868,test_t_rcd_4288675872,test_t_rfc_4288675876,test_t_rp_4288675880,test_t_rrd_4288675884,test_t_wr_4288675888,test_t_wtr_4288675892,test_c_burst_len_4288675896,test_c_burst_cycles_4288675900,test_c_rd_lat_4288675904,test_c_wr_lat_4288675908,test_c_col_shift_4288675912,test_c_col_mask_4288675916,test_c_row_shift_4288675920,test_c_row_mask_4288675924,test_c_bank_shift_4288675928,test_c_bank_mask_4288675932,test_c_offset_4288675936,test_c_start_addr_4288675940,test_c_end_addr_4288675944,test_d_wrseparation_4288675948,test_d_wrlatcorr_4288675952,test_ID_4293918720,test_INFO_4293918724,test_PAD_CONFIG_4293918760,test_ADDRESS_MASKING_RX_4293918756,test_ADDRESS_MAPPING_RX_4293918752,test_ADDRESS_MASKING_TX_4293918748,test_ADDRESS_MAPPING_TX_4293918744,test_IRQ_CONFIG_4293918740,test_IRQ_EN_4293918736,test_STATUS_CLR_4293918732,test_STATUS_4293918728,test_ID_4292870144,test_INFO_4292870148,test_STATUS_4292870152,test_STATUS_CLR_4292870156,test_IRQ_EN_4292870160,test_IRQ_CONFIG_4292870164,test_ADDRESS_MAPPING_TX_4292870168,test_PAD_C2C_CONFIG_2_4292870188,test_PAD_C2C_CONFIG_1_4292870184,test_ADDRESS_MASKING_RX_4292870180,test_ADDRESS_MAPPING_RX_4292870176,test_ADDRESS_MASKING_TX_4292870172,test_DIR_4287631360,test_EN_4287631364,test_IN_4287631368,test_OUT_4287631372,test_PAD_CFG_0_3_4287631400,test_PAD_CFG_4_7_4287631404,test_PAD_CFG_8_11_4287631408,test_PAD_CFG_12_15_4287631412,test_CTRL_CFG_CG_4287635456,test_CTRL_CFG_EVENT_4287635460,test_CTRL_CFG_RST_4287635464,test_UART_RX_SADDR_4287635584,test_UART_RX_SIZE_4287635588,test_UART_RX_CFG_4287635592,test_UART_TX_SADDR_4287635600,test_UART_TX_SIZE_4287635604,test_UART_TX_CFG_4287635608,test_UART_ERROR_4287635624,test_SPIM_RX_SIZE_4287635716,test_UART_DATA_4287635636,test_SPIM_RX_SADDR_4287635712,test_UART_STATUS_4287635616,test_UART_IRQ_EN_4287635628,test_UART_VALID_4287635632,test_SPIM_CMD_SADDR_4287635744,test_SPIM_TX_SADDR_4287635728,test_SPIM_CMD_SIZE_4287635748,test_SPIM_TX_SIZE_4287635732,test_SPIM_CMD_CFG_4287635752,test_UART_SETUP_4287635620,test_SPIM_TX_CFG_4287635736,test_SPIM_RX_CFG_4287635720,test_REG_TX_CH0_LEN1_4287636492,test_REG_TX_CH0_CFG_4287636484,test_REG_TX_CH0_LEN2_4287636496,test_REG_TX_CH0_LEN0_4287636488,test_REG_TX_CH0_ADD_4287636480,test_REG_TX_CH1_ADD_4287636500,test_REG_TX_CH1_CFG_4287636504,test_REG_TX_CH1_LEN0_4287636508,test_REG_TX_CH1_LEN1_4287636512,test_REG_FILT_CMD_4287636572,test_REG_BINCU_VAL_4287636564,test_REG_BINCU_CNT_4287636556,test_REG_AU_REG1_4287636548,test_REG_AU_CFG_4287636540,test_REG_RX_CH_LEN1_4287636532,test_REG_RX_CH_CFG_4287636524,test_REG_TX_CH1_LEN2_4287636516,test_REG_STATUS_4287636576,test_REG_FILT_4287636568,test_REG_BINCU_SETUP_4287636560,test_REG_BINCU_TH_4287636552,test_REG_AU_REG0_4287636544,test_REG_RX_CH_LEN2_4287636536,test_REG_RX_CH_LEN0_4287636528,test_REG_RX_CH_ADD_4287636520,test_T0_CMD_4287647744,test_T0_CONFIG_4287647748,test_T0_THRESHOLD_4287647752,test_T0_TH_CHANNEL0_4287647756,test_T0_TH_CHANNEL1_4287647760,test_T0_TH_CHANNEL2_4287647764,test_T0_TH_CHANNEL3_4287647768,test_T0_COUNTER_4287647788,test_T1_CMD_4287647808,test_T1_CONFIG_4287647812,test_T1_THRESHOLD_4287647816,test_T1_TH_CHANNEL0_4287647820,test_T1_TH_CHANNEL1_4287647824,test_T1_TH_CHANNEL2_4287647828,test_T1_TH_CHANNEL3_4287647832,test_T1_COUNTER_4287647852,test_T2_CMD_4287647872,test_T2_CONFIG_4287647876,test_T2_THRESHOLD_4287647880,test_T2_TH_CHANNEL0_4287647884,test_T2_TH_CHANNEL1_4287647888,test_T2_TH_CHANNEL2_4287647892,test_T2_TH_CHANNEL3_4287647896,test_T2_COUNTER_4287647916,test_T3_CMD_4287647936,test_T3_CONFIG_4287647940,test_T3_THRESHOLD_4287647944,test_T3_TH_CHANNEL0_4287647948,test_T3_TH_CHANNEL1_4287647952,test_T3_TH_CHANNEL2_4287647956,test_T3_TH_CHANNEL3_4287647960,test_CG_4287648004,test_T3_COUNTER_4287647980,test_EVENT_CFG_4287648000,test_SW_EVENT_4287651840,test_FC_MASK0_4287651844,test_FC_MASK1_4287651848,test_FC_MASK2_4287651852,test_FC_MASK3_4287651856,test_FC_MASK4_4287651860,test_FC_MASK5_4287651864,test_FC_MASK6_4287651868,test_FC_MASK7_4287651872,test_PR_MASK1_4287651912,test_PR_MASK2_4287651916,test_PR_MASK3_4287651920,test_PR_MASK4_4287651924,test_PR_MASK5_4287651928,test_PR_MASK6_4287651932,test_PR_MASK7_4287651936,test_ERR0_4287651940,test_PR_MASK0_4287651908,test_ERR1_4287651944,test_ERR2_4287651948,test_ERR3_4287651952,test_ERR4_4287651956,test_ERR5_4287651960,test_ERR6_4287651964,test_TIMER_HI_4287651976,test_ERR7_4287651968,test_TIMER_LO_4287651972,test_MASK_read_4287664128,test_MASK_set_4287664132,test_MASK_clear_4287664136,test_INT_read_4287664140,test_INT_set_4287664144,test_INT_clear_4287664148,test_ACK_read_4287664152,test_ACK_set_4287664156,test_ACK_clear_4287664160,test_FIFO_DATA_4287664164,test_CFG_LO_4287672320,test_CFG_HI_4287672324,test_CNT_LO_4287672328,test_CNT_HI_4287672332,test_CMP_LO_4287672336,test_CMP_HI_4287672340,test_START_LO_4287672344,test_START_HI_4287672348,test_RESET_LO_4287672352,test_RESET_HI_4287672356,test_CMD_OP_4287758368,test_CMD_ARG_4287758372,test_DATA_SETUP_4287758376,test_START_4287758380,test_STOP_4287758428,test_RSP0_4287758384,test_CID3_4287758420,test_CID1_4287758412,test_STATUS_4287758404,test_RSP3_4287758396,test_RSP1_4287758388,test_RCA_4287758424,test_CID2_4287758416,test_CID0_4287758408,test_CLK_DIV_0_4287758400,test_RSP2_4287758392,test_INFO_4287643648,test_FCBOOT_4287643652,test_FCFETCH_4287643656,test_PAD_MUX_0_4287643664,test_CLUSTER_BOOT_ADDR0_4287643776,test_CS_RO_4287643840,test_BOOTSEL_4287643844,test_CLUSTER_BOOT_ADDR1_4287643780,test_JTAGREG_4287643764,test_CTRL_PER_4287643768,test_CLKSEL_4287643848,test_CORESTATUS_4287643808,test_CLUSTER_IRQ_4287643772,test_PAD_CFG_1_4287643684,test_CLUSTER_CTRL_4287643760,test_REG_TTA_PLL_LOOP_CTRL_4287643744,test_REG_TTA_PLL_DIV_4287643748,test_REG_TTA_PLL_DEBUG_CTRL_4287643752,test_REG_TTA_PLL_ENABLE_4287643756,test_REG_TTA_PLL_SPARE_CTRL_4287643784,test_REG_TTA_PLL_TMUX_SEL_4287643788,test_REG_TTA_PLL_STATUS1_4287643792,test_PAD_CFG_0_4287643680,test_REG_INTER_CLK_DIV_4287643852,test_REG_PERIPH_CLK_DIV_4287643816,test_REG_TTA_PLL_STATUS2_4287643836,test_REG_TOPPERIPH_CLK_DIV_4287643796,test_REG_SS_CLK_CTRL1_4287643800,test_REG_SS_CLK_CTRL2_4287643804,test_REG_SS_RESET_EN_4287643824,test_REG_SS_CLK_EN_4287643828,test_REG_SS_CLK_CTRL3_4287643832,test_REG_SLOW_PULSE_DIV_4287643812,test_PAD_CFG_2_4287643688,test_PAD_CFG_3_4287643692,test_PAD_CFG_5_4287643700,test_PAD_CFG_4_4287643696,test_REG_ETH_PLL_LOOP_CTRL_4287643856,test_REG_ETH_PLL_DIV_4287643860,test_REG_ETH_PLL_DEBUG_CTRL_4287643864,test_REG_ETH_PLL_ENABLE_4287643868,test_REG_ETH_PLL_SPARE_CTRL_4287643872,test_REG_ETH_PLL_TMUX_SEL_4287643876,test_REG_ETH_PLL_STATUS1_4287643880,test_REG_ETH_PLL_STATUS2_4287643884,test_REG_AI_PLL_LOOP_CTRL_4287643888,test_REG_AI_PLL_DIV_4287643892,test_REG_AI_PLL_DEBUG_CTRL_4287643896,test_REG_AI_PLL_ENABLE_4287643900,test_REG_AI_PLL_SPARE_CTRL_4287643904,test_REG_AI_PLL_TMUX_SEL_4287643908,test_REG_AI_PLL_STATUS1_4287643912,test_REG_AI_PLL_STATUS2_4287643916,test_REG_HPC_PLL_LOOP_CTRL_4287643920,test_REG_HPC_PLL_DIV_4287643924,test_REG_HPC_PLL_DEBUG_CTRL_4287643928,test_REG_HPC_PLL_ENABLE_4287643932,test_REG_HPC_PLL_SPARE_CTRL_4287643936,test_REG_HPC_PLL_TMUX_SEL_4287643940,test_REG_HPC_PLL_STATUS1_4287643944,test_REG_HPC_PLL_STATUS2_4287643948,test_REG_PULP_PLL_LOOP_CTRL_4287643952,test_REG_PULP_PLL_DIV_4287643956,test_REG_PULP_PLL_DEBUG_CTRL_4287643960,test_REG_PULP_PLL_ENABLE_4287643964,test_REG_PULP_PLL_SPARE_CTRL_4287643968,test_REG_PULP_PLL_TMUX_SEL_4287643972,test_REG_PULP_PLL_STATUS1_4287643976,test_REG_PULP_PLL_STATUS2_4287643980,test_REG_INTER_PLL_LOOP_CTRL_4287643984,test_REG_INTER_PLL_DIV_4287643988,test_REG_INTER_PLL_DEBUG_CTRL_4287643992,test_REG_INTER_PLL_ENABLE_4287643996,test_REG_INTER_PLL_SPARE_CTRL_4287644000,test_REG_INTER_PLL_TMUX_SEL_4287644004,test_REG_INTER_PLL_STATUS1_4287644008,test_REG_INTER_PLL_STATUS2_4287644012,test_REG_C2C_PLL_LOOP_CTRL_4287644016,test_REG_C2C_PLL_DIV_4287644020,test_REG_C2C_PLL_DEBUG_CTRL_4287644024,test_REG_C2C_PLL_ENABLE_4287644028,test_REG_C2C_PLL_SPARE_CTRL_4287644032,test_REG_C2C_PLL_TMUX_SEL_4287644036,test_REG_C2C_PLL_STATUS1_4287644040,test_REG_C2C_PLL_STATUS2_4287644044,test_REG_TOPPERIPH_PLL_LOOP_CTRL_4287644080,test_REG_TOPPERIPH_PLL_DIV_4287644084,test_REG_TOPPERIPH_PLL_DEBUG_CTRL_4287644088,test_REG_TOPPERIPH_PLL_ENABLE_4287644092,test_REG_TOPPERIPH_PLL_SPARE_CTRL_4287644096,test_REG_TOPPERIPH_PLL_TMUX_SEL_4287644100,test_REG_TOPPERIPH_PLL_STATUS1_4287644104,test_REG_TOPPERIPH_PLL_STATUS2_4287644108,test_REG_BOOT_CFG_4287644112,test_REG_BOOT_STATUS_4287644116,test_IP_ID_4291821568,test_INFO_4291821572,test_STATUS0_4291821576,test_STATUS_CLEAR0_4291821592,test_IRQ_ENABLE0_4291821608,test_IRQ_CONFIG_4291821624,test_SOURCE_ADDR0_4291821632,test_SOURCE_LENGTH0_4291821636,test_SOURCE_MODE0_4291821640,test_SOURCE_MODE_SET0_4291821644,test_SOURCE_MODE_UNSET0_4291821648,test_AXI_READ_CONFIG0_4291821652,test_Reserved_Read_Data_for_Processor_Channels_4291821656,test_DESTINATION_ADDR0_4291821660,test_D_SOURCE_ADDR0_4291821696,test_Reserved_Write_Data_for_Processor_Channels_4291821684,test_AXI_WRITE_CONFIG0_4291821680,test_DESTINATION_MODE_UNSET0_4291821676,test_DESTINATION_MODE_SET0_4291821672,test_DESTINATION_MODE0_4291821668,test_DESTINATION_LENGTH0_4291821664,test_D_SOURCE_LENGTH0_4291821700,test_D_SOURCE_MODE0_4291821704,test_D_SOURCE_MODE_SET0_4291821708,test_D_SOURCE_MODE_UNSET0_4291821712,test_D_SOURCE_AXI_CONFIG0_4291821716,test_Reserved_Read_Data_for_Processor_Channels_0_4291821720,test_D_DESTINATION_ADDR0_4291821724,test_D_DESTINATION_LENGTH0_4291821728,test_D_DESTINATION_MODE0_4291821732,test_D_DESTINATION_MODE_SET0_4291821736,test_D_DESTINATION_MODE_UNSET0_4291821740,test_D_DESTINATION_AXI_CONFIG0_4291821744,test_SOURCE_ADDR1_4291821760,test_SOURCE_LENGTH1_4291821764,test_SOURCE_MODE1_4291821768,test_SOURCE_MODE_SET1_4291821772,test_SOURCE_MODE_UNSET1_4291821776,test_AXI_READ_CONFIG1_4291821780,test_Reserved_Read_Data_for_Processor_Channels_4291821784,test_DESTINATION_ADDR1_4291821788,test_D_SOURCE_ADDR1_4291821824,test_Reserved_Write_Data_for_Processor_Channels_4291821812,test_AXI_WRITE_CONFIG1_4291821808,test_DESTINATION_MODE_UNSET1_4291821804,test_DESTINATION_MODE_SET1_4291821800,test_DESTINATION_MODE1_4291821796,test_DESTINATION_LENGTH1_4291821792,test_D_SOURCE_LENGTH1_4291821828,test_D_SOURCE_MODE1_4291821832,test_D_SOURCE_MODE_SET1_4291821836,test_D_SOURCE_MODE_UNSET1_4291821840,test_D_SOURCE_AXI_CONFIG1_4291821844,test_Reserved_Read_Data_for_Processor_Channels_1_4291821848,test_D_DESTINATION_ADDR1_4291821852,test_D_DESTINATION_LENGTH1_4291821856,test_D_DESTINATION_MODE1_4291821860,test_D_DESTINATION_MODE_SET1_4291821864,test_D_DESTINATION_MODE_UNSET1_4291821868,test_D_DESTINATION_AXI_CONFIG1_4291821872,test_SOURCE_ADDR2_4291822016,test_SOURCE_LENGTH2_4291822020,test_SOURCE_MODE2_4291822024,test_SOURCE_MODE_SET2_4291822028,test_SOURCE_MODE_UNSET2_4291822032,test_AXI_READ_CONFIG2_4291822036,test_Reserved_Read_Data_for_Processor_Channels_4291822040,test_DESTINATION_ADDR2_4291822044,test_D_SOURCE_ADDR2_4291822080,test_Reserved_Write_Data_for_Processor_Channels_4291822068,test_AXI_WRITE_CONFIG2_4291822064,test_DESTINATION_MODE_UNSET2_4291822060,test_DESTINATION_MODE_SET2_4291822056,test_DESTINATION_MODE2_4291822052,test_DESTINATION_LENGTH2_4291822048,test_D_SOURCE_LENGTH2_4291822084,test_D_SOURCE_MODE2_4291822088,test_D_SOURCE_MODE_SET2_4291822092,test_D_SOURCE_MODE_UNSET2_4291822096,test_D_SOURCE_AXI_CONFIG2_4291822100,test_Reserved_Read_Data_for_Processor_Channels_0_4291822104,test_D_DESTINATION_ADDR2_4291822108,test_D_DESTINATION_LENGTH2_4291822112,test_D_DESTINATION_MODE2_4291822116,test_D_DESTINATION_MODE_SET2_4291822120,test_D_DESTINATION_MODE_UNSET2_4291822124,test_D_DESTINATION_AXI_CONFIG2_4291822128,test_SOURCE_ADDR3_4291821888,test_SOURCE_LENGTH3_4291821892,test_SOURCE_MODE3_4291821896,test_SOURCE_MODE_SET3_4291821900,test_SOURCE_MODE_UNSET3_4291821904,test_AXI_READ_CONFIG3_4291821908,test_Reserved_Read_Data_for_Processor_Channels_4291821912,test_DESTINATION_ADDR3_4291821916,test_D_SOURCE_ADDR3_4291821952,test_Reserved_Write_Data_for_Processor_Channels_4291821940,test_AXI_WRITE_CONFIG3_4291821936,test_DESTINATION_MODE_UNSET3_4291821932,test_DESTINATION_MODE_SET3_4291821928,test_DESTINATION_MODE3_4291821924,test_DESTINATION_LENGTH3_4291821920,test_D_SOURCE_LENGTH3_4291821956,test_D_SOURCE_MODE3_4291821960,test_D_SOURCE_MODE_SET3_4291821964,test_D_SOURCE_MODE_UNSET3_4291821968,test_D_SOURCE_AXI_CONFIG3_4291821972,test_Reserved_Read_Data_for_Processor_Channels_0_4291821976,test_D_DESTINATION_ADDR3_4291821980,test_D_DESTINATION_LENGTH3_4291821984,test_D_DESTINATION_MODE3_4291821988,test_D_DESTINATION_MODE_SET3_4291821992,test_D_DESTINATION_MODE_UNSET3_4291821996,test_D_DESTINATION_AXI_CONFIG3_4291822000];